image_path= "/content/mountain color.jfif"
import cv2
from google.colab.patches import cv2_imshow
# Read the image
image = cv2.imread(image_path)
image
# Function to adjust brightness and contrast
def adjust_brightness_contrast(image, alpha=1.0, beta=0):
    # Convert to a new image with adjusted brightness and contrast
    new_image = cv2.convertScaleAbs(image, alpha=alpha, beta=beta)
    return new_image

# Adjust brightness and contrast
alpha = 1.5  # Contrast control (1.0-3.0)
beta = 50    # Brightness control (0-100)
adjusted_image = adjust_brightness_contrast(image, alpha, beta)

# Display the original and adjusted images
cv2_imshow(image)           # Original image
cv2_imshow(adjusted_image)  # Adjusted image
# Function to find the digital negative of the image
def digital_negative(image):
    negative_image = cv2.bitwise_not(image)
    return negative_image

# Find the digital negative of the image
negative_image = digital_negative(image)
# Display the original and digital negative images
cv2_imshow(image)           # Original image
cv2_imshow(negative_image)  # Digital negative image
# Function to get the red, green, blue values of each pixel
def get_rgb_values(image):
    height, width, _ = image.shape
    rgb_values = []
    for y in range(height):
        for x in range(width):
            b, g, r = image[y, x]
            rgb_values.append((r, g, b))
    return rgb_values

# Get RGB values of each pixel
rgb_values = get_rgb_values(image)

# Print first 10 RGB values as a sample
print(rgb_values[:10])
# Function to create the new subtractive image
def create_new(image):
    new_image = 255 - image
    return new_image

# Create the new image
new_image = create_new(image)

# Display the original and new images
cv2_imshow(image)           # Original image
cv2_imshow(new_image)       # New image
# Function to create a new image with modified colors by subtracting each color value from 255
def create_modified_image(image):
    # Create a new image with the same dimensions
    modified_image = 255 - image
    return modified_image

# Create the modified image
modified_image = create_modified_image(image)

# Store the new pixel values in a variable (not displaying or saving)
new_pixel_values = modified_image

# Print the shape and dtype of the modified image as confirmation
print("Modified image shape:", new_pixel_values.shape)
print("Modified image data type:", new_pixel_values.dtype)
# Convert the image from BGR to RGB (for correct color display in Matplotlib)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Function to create a new image with modified colors by subtracting each color value from 255
def create_modified_image(image):
    # Create a new image with the same dimensions
    modified_image = 255 - image
    return modified_image

# Create the modified image
modified_image = create_modified_image(image_rgb)
# Import the matplotlib.pyplot module
import matplotlib.pyplot as plt

# Plot the original and modified images
plt.figure(figsize=(10, 5))
# Original image
plt.subplot(1, 2, 1)
plt.imshow(image_rgb)
plt.title('Original Image')
plt.axis('off')

# Modified image
plt.subplot(1, 2, 2)
plt.imshow(modified_image)
plt.title('Modified Image')
plt.axis('off')

# Display the plots
plt.show()
